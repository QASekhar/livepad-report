{"uid":"5c20770fa755756d","name":"Verify 'Tutorial Videos' link navigation to Vimeo","fullName":"tests.test_landing.TestLandingPage#test_tutorial_video_navigation","historyId":"73efc1c050f15132d5ae949b0f0e5878","time":{"start":1750684787304,"stop":1750684788462,"duration":1158},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (783, 2722)\n  (Session info: chrome=137.0.7151.120)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff77433cda5+78885]\n\tGetHandleVerifier [0x0x7ff77433ce00+78976]\n\t(No symbol) [0x0x7ff7740f9bca]\n\t(No symbol) [0x0x7ff774158779]\n\t(No symbol) [0x0x7ff774156112]\n\t(No symbol) [0x0x7ff774153151]\n\t(No symbol) [0x0x7ff774152041]\n\t(No symbol) [0x0x7ff774143654]\n\t(No symbol) [0x0x7ff774178b8a]\n\t(No symbol) [0x0x7ff774142f06]\n\t(No symbol) [0x0x7ff774178da0]\n\t(No symbol) [0x0x7ff7741a122f]\n\t(No symbol) [0x0x7ff774178963]\n\t(No symbol) [0x0x7ff7741416b1]\n\t(No symbol) [0x0x7ff774142443]\n\tGetHandleVerifier [0x0x7ff774614eed+3061101]\n\tGetHandleVerifier [0x0x7ff77460f33d+3037629]\n\tGetHandleVerifier [0x0x7ff77462e592+3165202]\n\tGetHandleVerifier [0x0x7ff77435730e+186766]\n\tGetHandleVerifier [0x0x7ff77435eb3f+217535]\n\tGetHandleVerifier [0x0x7ff7743459b4+114740]\n\tGetHandleVerifier [0x0x7ff774345b69+115177]\n\tGetHandleVerifier [0x0x7ff77432c368+10728]\n\tBaseThreadInitThunk [0x0x7ffeb4de7374+20]\n\tRtlUserThreadStart [0x0x7ffeb515cc91+33]","statusTrace":"self = <tests.test_landing.TestLandingPage object at 0x00000184204410C0>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ff4ff14efc6a8f2d731511cd38daf640\")>\nconfig = <config.config_loader.ConfigLoader object at 0x0000018420530460>\n\n    @pytest.mark.smoke\n    @pytest.mark.regression\n    @allure.title(\"Verify 'Tutorial Videos' link navigation to Vimeo\")\n    def test_tutorial_video_navigation(self, browser, config):\n        page = LandingPage(browser, config)\n>       page.click_tutorial_videos()\n\ntests\\test_landing.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\landing_page.py:31: in click_tutorial_videos\n    self.click(self.TUTORIAL_VIDEOS_LINK)\npages\\base_page.py:15: in click\n    self.wait.until(EC.element_to_be_clickable(locator)).click()\nD:\\ProjectForAutomation\\livePad_automation\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\ProjectForAutomation\\livePad_automation\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nD:\\ProjectForAutomation\\livePad_automation\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018420443490>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff77432c368+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffeb4de7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffeb515cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (783, 2722)\nE         (Session info: chrome=137.0.7151.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff77433cda5+78885]\nE       \tGetHandleVerifier [0x0x7ff77433ce00+78976]\nE       \t(No symbol) [0x0x7ff7740f9bca]\nE       \t(No symbol) [0x0x7ff774158779]\nE       \t(No symbol) [0x0x7ff774156112]\nE       \t(No symbol) [0x0x7ff774153151]\nE       \t(No symbol) [0x0x7ff774152041]\nE       \t(No symbol) [0x0x7ff774143654]\nE       \t(No symbol) [0x0x7ff774178b8a]\nE       \t(No symbol) [0x0x7ff774142f06]\nE       \t(No symbol) [0x0x7ff774178da0]\nE       \t(No symbol) [0x0x7ff7741a122f]\nE       \t(No symbol) [0x0x7ff774178963]\nE       \t(No symbol) [0x0x7ff7741416b1]\nE       \t(No symbol) [0x0x7ff774142443]\nE       \tGetHandleVerifier [0x0x7ff774614eed+3061101]\nE       \tGetHandleVerifier [0x0x7ff77460f33d+3037629]\nE       \tGetHandleVerifier [0x0x7ff77462e592+3165202]\nE       \tGetHandleVerifier [0x0x7ff77435730e+186766]\nE       \tGetHandleVerifier [0x0x7ff77435eb3f+217535]\nE       \tGetHandleVerifier [0x0x7ff7743459b4+114740]\nE       \tGetHandleVerifier [0x0x7ff774345b69+115177]\nE       \tGetHandleVerifier [0x0x7ff77432c368+10728]\nE       \tBaseThreadInitThunk [0x0x7ffeb4de7374+20]\nE       \tRtlUserThreadStart [0x0x7ffeb515cc91+33]\n\nD:\\ProjectForAutomation\\livePad_automation\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1750684733543,"stop":1750684733678,"duration":135},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1750684733678,"stop":1750684733678,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser","time":{"start":1750684733678,"stop":1750684736881,"duration":3203},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1750684733678,"stop":1750684733678,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"config","time":{"start":1750684736881,"stop":1750684736882,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"browser::0","time":{"start":1750684790001,"stop":1750684792427,"duration":2426},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"Landing Page Smoke Suite"},{"name":"feature","value":"Landing Page Tests"},{"name":"tag","value":"regression"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests"},{"name":"subSuite","value":"TestLandingPage"},{"name":"host","value":"DESKTOP-92FVP13"},{"name":"thread","value":"22080-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_landing"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["regression","smoke"]},"source":"5c20770fa755756d.json","parameterValues":[]}